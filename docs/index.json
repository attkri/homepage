[{"content":"Willkommen auf meiner Website! ðŸš€ Ich bin Attila Krick, Experte fÃ¼r PowerShell, .NET und SQL. Hier findest du meine Schulungen, Dienstleistungen und Blogartikel.\nðŸ‘‰ Mehr Ã¼ber mich erfahren\n","permalink":"https://attilakrick.com/_template/","summary":"\u003ch2 id=\"willkommen-auf-meiner-website-\"\u003eWillkommen auf meiner Website! ðŸš€\u003c/h2\u003e\n\u003cp\u003eIch bin \u003cstrong\u003eAttila Krick\u003c/strong\u003e, Experte fÃ¼r PowerShell, .NET und SQL.\nHier findest du meine Schulungen, Dienstleistungen und Blogartikel.\u003c/p\u003e\n\u003cp\u003eðŸ‘‰ \u003ca href=\"/leistungen/\"\u003eMehr Ã¼ber mich erfahren\u003c/a\u003e\u003c/p\u003e","title":"Objekte, Pipeline \u0026 Cmdlets â€“ So arbeitest du effizient mit PowerShell"},{"content":"So funktioniert PowerShell wirklich â€“ mit Objekten \u0026amp; Pipeline Jetzt wirdâ€™s technisch â€“ aber keine Sorge: In diesem Beitrag lernst du Schritt fÃ¼r Schritt, wie PowerShell im Inneren funktioniert. Wir schauen uns die Objektverarbeitung, die Pipeline und die clevere Kombination von Cmdlets an â€“ so, wie PowerShell eigentlich gedacht ist.\nDenn: PowerShell ist keine normale Kommandozeile â€“ sie ist objektbasiert. Und genau das macht sie so einzigartig und leistungsfÃ¤hig.\nWarum PowerShell keine Texte verarbeitet â€“ sondern Objekte In klassischen Shells bekommst du oft nur Text zurÃ¼ck â€“ z.â€¯B. bei ipconfig. In PowerShell erhÃ¤ltst du strukturierte Objekte, mit Eigenschaften und Methoden. Das ist ein riesiger Vorteil, denn damit kannst du gezielt auf Werte zugreifen, filtern und weiterverarbeiten.\nBeispiel:\n1Get-Process zeigt nicht nur eine Texttabelle, sondern liefert eine Liste von Prozessobjekten mit Eigenschaften wie Name, Id, WorkingSet, etc.\nDu willst wissen, was du mit diesen Objekten machen kannst? Nutze dieses Cmdlet zur Analyse:\n1Get-Process | Get-Member (Der Alias dafÃ¼r ist gm)\nDie Pipeline â€“ das HerzstÃ¼ck von PowerShell Mit dem Pipe-Zeichen | leitest du die Ausgabe eines Cmdlets direkt an das nÃ¤chste weiter. Und da es Objekte sind, bleibt die Struktur erhalten.\nEin Beispiel fÃ¼r einen einfachen Datenfluss:\n1Get-Service | Where-Object Status -eq \u0026#34;Running\u0026#34; | Sort-Object DisplayName Was passiert hier?\nGet-Service holt alle Dienste Where-Object filtert nur laufende (Running) heraus Sort-Object sortiert sie nach Namen Objekt rein â€“ Objekt raus. So einfach.\nWas ist ein Cmdlet eigentlich? Ein Cmdlet (sprich: â€žCommand-Letâ€œ) ist der kleinste Befehl in PowerShell. Jedes Cmdlet folgt der Konvention Verb-Noun, z.â€¯B.:\nGet-Process Set-Location Remove-Item Cmdlets sind modular, oft Ã¼ber PowerShell-Module bereitgestellt und lassen sich Ã¼ber Get-Command oder Find-Command finden.\nDaten selektieren, filtern \u0026amp; ausgeben Mit Cmdlets wie Select-Object, Where-Object und Sort-Object kannst du Daten verarbeiten wie ein echter Datenjongleur:\n1Get-ChildItem -Path C:\\Windows -File \\ 2| Where-Object Length -ge 10KB \\ 3| Select-Object Name, Length \\ 4| Sort-Object Length -Descending Jeder Schritt liefert wieder ein Objekt â€“ perfekt fÃ¼r weitere Verarbeitung oder Ausgabe.\nBonus: Ausgabe als CSV-Datei speichern Du mÃ¶chtest Ergebnisse weitergeben oder archivieren? Kein Problem:\n1Get-Process \\ 2| Select-Object Name, Id, @{Name=\u0026#39;RAM_MB\u0026#39;;Expression={ [math]::Round($_.WorkingSet/1MB,2) }} \\ 3| ConvertTo-Csv -Delimiter \u0026#34;;\u0026#34; \\ 4| Out-File \u0026#34;$env:TEMP\\\\prozesse.csv\u0026#34; So exportierst du strukturierte Daten in eine Datei â€“ ideal fÃ¼r Reporting, Audits oder Excel-Nutzer.\nFazit \u0026amp; Ausblick Jetzt hast du das HerzstÃ¼ck von PowerShell verstanden:\nPowerShell verarbeitet Objekte statt Text Die Pipeline leitet Daten weiter â€“ effizient und elegant Cmdlets lassen sich logisch kombinieren In einem der nÃ¤chsten BeitrÃ¤ge zeige ich dir, wie du eigene Cmdlets und Funktionen schreibst oder die PowerShell zur SQL-Automatisierung nutzt.\nNoch Fragen oder Interesse an individueller Beratung? ðŸ‘‰ Kontaktiere mich hier!\n","permalink":"https://attilakrick.com/posts/powershell/objekte_pipeline_cmdlets/","summary":"\u003ch2 id=\"so-funktioniert-powershell-wirklich--mit-objekten--pipeline\"\u003eSo funktioniert PowerShell wirklich â€“ mit Objekten \u0026amp; Pipeline\u003c/h2\u003e\n\u003cp\u003eJetzt wirdâ€™s technisch â€“ aber keine Sorge: In diesem Beitrag lernst du Schritt fÃ¼r Schritt, wie PowerShell im Inneren funktioniert. Wir schauen uns die \u003cstrong\u003eObjektverarbeitung\u003c/strong\u003e, die \u003cstrong\u003ePipeline\u003c/strong\u003e und die clevere Kombination von Cmdlets an â€“ so, wie PowerShell eigentlich gedacht ist.\u003c/p\u003e\n\u003cp\u003eDenn: PowerShell ist keine normale Kommandozeile â€“ sie ist \u003cstrong\u003eobjektbasiert\u003c/strong\u003e. Und genau das macht sie so einzigartig und leistungsfÃ¤hig.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"warum-powershell-keine-texte-verarbeitet--sondern-objekte\"\u003eWarum PowerShell keine Texte verarbeitet â€“ sondern Objekte\u003c/h3\u003e\n\u003cp\u003eIn klassischen Shells bekommst du oft nur Text zurÃ¼ck â€“ z.â€¯B. bei \u003ccode\u003eipconfig\u003c/code\u003e. In PowerShell erhÃ¤ltst du \u003cstrong\u003estrukturierte Objekte\u003c/strong\u003e, mit Eigenschaften und Methoden. Das ist ein riesiger Vorteil, denn damit kannst du gezielt auf Werte zugreifen, filtern und weiterverarbeiten.\u003c/p\u003e","title":"Objekte, Pipeline \u0026 Cmdlets â€“ So arbeitest du effizient mit PowerShell"},{"content":"PowerShell benutzen â€“ Tools, VS Code und erste Schritte Im ersten Teil hast du erfahren, was PowerShell ist und warum sie so mÃ¤chtig ist. Jetzt gehtâ€™s ans Eingemachte: In diesem Beitrag zeige ich dir, wie du PowerShell installierst, welche Tools dir das Leben leichter machen â€“ und wie du deine ersten Cmdlets schreibst.\nPowerShell installieren Die klassische â€žWindows PowerShellâ€œ ist auf jedem Windows 10/11 bereits vorinstalliert â€“ in Version 5.1. Aber: Die Zukunft heiÃŸt PowerShell 7. Diese moderne Version ist plattformÃ¼bergreifend (Windows, Linux, macOS) und basiert auf .NET Core.\nSo installierst du PowerShell 7 auf Windows Lade das aktuelle Installationspaket von GitHub herunter: PowerShell Releases WÃ¤hle die passende .msi-Datei fÃ¼r dein System (z.â€¯B. PowerShell-7.x.x-win-x64.msi) Installieren, fertig. PowerShell 7 findest du danach im StartmenÃ¼ unter â€žPowerShell 7 (x64)â€œ ðŸ’¡ Die alte Windows PowerShell 5.1 und PowerShell 7 kÃ¶nnen parallel betrieben werden â€“ das ist sogar empfehlenswert.\nDie besten Tools zum Arbeiten mit PowerShell 1. Visual Studio Code (VS Code) Visual Studio Code ist der perfekte Editor fÃ¼r PowerShell. Microsoft empfiehlt ihn offiziell als Nachfolger der alten â€žPowerShell ISEâ€œ.\nKostenlos, Open Source, plattformÃ¼bergreifend Integriertes Terminal und Debugger Erweiterbar mit Extensions ðŸ’¡ Alternativ: VSCodium â€“ komplett ohne Microsoft-Telemetrie\nDiese Extensions solltest du installieren Erweiterung Beschreibung PowerShell Syntax-Highlighting, IntelliSense, Debugging Better Comments Kommentiere Skripte farblich strukturiert Markdown All in One Praktisch fÃ¼r Dokumentationen und Blogposts Nach der Installation kannst du PowerShell-Skripte direkt in VS Code schreiben, ausfÃ¼hren (F8) und debuggen (F5).\n2. Windows Terminal Das neue Windows Terminal ist ein echter Gamechanger:\nMehrere Tabs fÃ¼r PowerShell, CMD, WSL \u0026amp; mehr Modernes Design, schnelle Eingabe VollstÃ¤ndig anpassbar Du kannst es direkt Ã¼ber den Microsoft Store installieren oder via GitHub. Starte es danach Ã¼ber WIN + R â†’ wt\nErste Schritte mit Cmdlets Jetzt wirdâ€™s praktisch. Ã–ffne PowerShell 7 oder VS Code mit Terminal und gib folgende Zeilen ein:\n1Get-Process Das zeigt dir alle laufenden Prozesse als Tabelle. Noch besser:\n1Get-Process | Format-List Oder hÃ¼bsch mit GUI:\n1Get-Process | Out-GridView ðŸ’¡ Cmdlets folgen immer dem Muster Verb-Substantiv, z.â€¯B. Get-Help, Set-Location, Start-Service\nDu kannst mehrere Cmdlets mit der Pipeline (|) verbinden. Das ist eines der wichtigsten Prinzipien in PowerShell.\nSkripte erstellen und ausfÃ¼hren In VS Code: File \u0026gt; New File â†’ Inhalt eingeben â†’ speichern als .ps1-Datei.\nBeispiel:\n1Get-ChildItem -Path C:\\Windows -Directory DrÃ¼cke F8, um einzelne Zeilen auszufÃ¼hren â€“ oder F5, um das gesamte Skript zu starten.\nAchtung: PowerShell schÃ¼tzt dich vor der AusfÃ¼hrung unbekannter Skripte. Du musst einmalig die Execution Policy Ã¤ndern:\n1Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Mehr zur Sicherheit und AusfÃ¼hrungsrichtlinien folgt in Teil 3.\nFazit \u0026amp; Ausblick Du hast jetzt alles, was du brauchst, um PowerShell produktiv zu nutzen: Eine moderne Shell, ein komfortables Editor-Setup und erste Befehle, mit denen du direkt loslegen kannst.\nIn Teil 3 steigen wir tiefer ein: Du lernst, wie du mit Objekten arbeitest, Daten analysierst und eigene Cmdlets kombinierst.\nðŸ‘‰ Du willst schneller vorankommen? Schau dir meine PowerShell Seminare an â€“ oder nimm direkt Kontakt auf.\nNoch Fragen oder Feedback?\nðŸ‘‰ Melde dich gern bei mir!\n","permalink":"https://attilakrick.com/posts/powershell/powershell_benutzen/","summary":"\u003ch2 id=\"powershell-benutzen--tools-vs-code-und-erste-schritte\"\u003ePowerShell benutzen â€“ Tools, VS Code und erste Schritte\u003c/h2\u003e\n\u003cp\u003eIm ersten Teil hast du erfahren, was PowerShell ist und warum sie so mÃ¤chtig ist. Jetzt gehtâ€™s ans Eingemachte: In diesem Beitrag zeige ich dir, wie du PowerShell installierst, welche Tools dir das Leben leichter machen â€“ und wie du deine ersten Cmdlets schreibst.\u003c/p\u003e\n\u003ch3 id=\"powershell-installieren\"\u003ePowerShell installieren\u003c/h3\u003e\n\u003cp\u003eDie klassische â€žWindows PowerShellâ€œ ist auf jedem Windows 10/11 bereits vorinstalliert â€“ in Version 5.1. Aber: Die Zukunft heiÃŸt \u003cstrong\u003ePowerShell 7\u003c/strong\u003e. Diese moderne Version ist plattformÃ¼bergreifend (Windows, Linux, macOS) und basiert auf \u003cstrong\u003e.NET Core\u003c/strong\u003e.\u003c/p\u003e","title":"PowerShell benutzen â€“ Tools, VS Code und erste Schritte"},{"content":"Warum du PowerShell kennenlernen solltest Du hast schon mal von PowerShell gehÃ¶rt, aber weiÃŸt nicht genau, was das eigentlich ist? Dann geht es dir wie vielen IT-Einsteigern. Vielleicht bist du Admin, technischer Supporter oder angehender Entwickler und suchst ein Werkzeug, mit dem du Aufgaben automatisieren oder Systeme konfigurieren kannst. Genau da kommt PowerShell ins Spiel.\nWas ist PowerShell Ã¼berhaupt? PowerShell ist eine moderne Kommandozeile mit eingebauter Skriptsprache â€“ entwickelt von Microsoft. Im Gegensatz zu klassischen Shells (wie CMD oder Bash) arbeitet PowerShell nicht mit Text, sondern mit echten Objekten aus der .NET-Welt. Das macht sie besonders mÃ¤chtig, flexibel und ideal fÃ¼r Automatisierung.\nDu kannst mit PowerShell nicht nur einfache Befehle ausfÃ¼hren, sondern ganze Skripte schreiben, Server verwalten, Benutzer automatisiert anlegen oder Daten auswerten. Alles mit einer einheitlichen, gut lesbaren Syntax.\nðŸ”Ž PowerShell basiert auf dem .NET-Framework und nutzt objektorientierte Programmierung. Aber keine Sorge â€“ das klingt komplizierter, als es ist.\nWas kann man damit machen? Ein paar typische Aufgaben, die du mit PowerShell erledigen kannst:\nDateien kopieren, verschieben oder analysieren Prozesse und Dienste starten oder beenden Netzwerkeinstellungen prÃ¼fen Active Directory verwalten Daten in CSV/Excel exportieren SQL-Datenbanken abfragen (z.â€¯B. via Invoke-SqlCmd) PowerShell ist nicht nur fÃ¼r Admins interessant â€“ auch freie Softwareentwickler, DevOps-Fans oder Automatisierungs-Enthusiasten profitieren.\nWer sollte sich PowerShell anschauen? PowerShell ist ideal fÃ¼r:\nEinsteiger in die IT IT-Admins und Systemingenieure Helpdesk- und Supportmitarbeiter SchÃ¼ler \u0026amp; Studierende im Bereich IT Techniker, die sich automatisieren wollen Und das Beste: Du brauchst keinen Programmierhintergrund, um loszulegen. Viele Befehle lesen sich fast wie Englisch â€“ zum Beispiel Get-Process oder Start-Service.\nAuf welchen Systemen lÃ¤uft PowerShell? PowerShell ist plattformÃ¼bergreifend. Du kannst sie nutzen unter:\nWindows Linux macOS Ab PowerShell 7 basiert alles auf .NET Core â€“ dadurch funktioniert es fast Ã¼berall. Die Shell ist modular aufgebaut, du kannst dir Erweiterungen (sogenannte â€žModuleâ€œ) einfach dazu installieren.\nðŸ’¡ PowerShell 7 ist der offizielle Nachfolger der Windows PowerShell 5.1 und lÃ¤uft parallel problemlos.\nWarum ist PowerShell so beliebt? Weil sie drei Dinge miteinander verbindet:\nEinfachheit: Klar strukturierte Syntax MÃ¤chtigkeit: Zugriff auf .NET, WMI, CIM, Registry, Dateisystem und mehr Automatisierung: Skripte schreiben statt immer wieder klicken Und: Du kannst Ã¼ber die sogenannte Pipeline (|) Befehle miteinander verketten. So lassen sich komplexe Aufgaben mit wenigen Zeilen elegant lÃ¶sen.\nWie geht es weiter? In Teil 2 dieser Serie zeige ich dir, wie du PowerShell installierst, welche Tools du brauchst (z.â€¯B. Visual Studio Code \u0026amp; Windows Terminal) und wie du deine ersten Cmdlets ausprobierst.\nWenn du neugierig geworden bist, schau auch gerne in meine PowerShell Seminare rein â€“ vom Einsteigerkurs bis zum Profi-Workshop ist alles dabei.\nNoch Fragen oder Lust auf ein persÃ¶nliches Coaching? ðŸ‘‰ Melde dich gern bei mir!\n","permalink":"https://attilakrick.com/posts/powershell/powershell-verstehen/","summary":"\u003ch2 id=\"warum-du-powershell-kennenlernen-solltest\"\u003eWarum du PowerShell kennenlernen solltest\u003c/h2\u003e\n\u003cp\u003eDu hast schon mal von PowerShell gehÃ¶rt, aber weiÃŸt nicht genau, was das eigentlich ist? Dann geht es dir wie vielen IT-Einsteigern. Vielleicht bist du Admin, technischer Supporter oder angehender Entwickler und suchst ein Werkzeug, mit dem du Aufgaben automatisieren oder Systeme konfigurieren kannst. Genau da kommt PowerShell ins Spiel.\u003c/p\u003e\n\u003ch2 id=\"was-ist-powershell-Ã¼berhaupt\"\u003eWas ist PowerShell Ã¼berhaupt?\u003c/h2\u003e\n\u003cp\u003ePowerShell ist eine moderne Kommandozeile mit eingebauter Skriptsprache â€“ entwickelt von Microsoft. Im Gegensatz zu klassischen Shells (wie CMD oder Bash) arbeitet PowerShell \u003cstrong\u003enicht mit Text\u003c/strong\u003e, sondern mit \u003cstrong\u003eechten Objekten\u003c/strong\u003e aus der .NET-Welt. Das macht sie besonders mÃ¤chtig, flexibel und ideal fÃ¼r Automatisierung.\u003c/p\u003e","title":"PowerShell verstehen â€“ Was ist das \u0026 warum brauchst du es?"},{"content":"T-SQL JOINs fÃ¼r Einsteiger: So verknÃ¼pfst du deine Daten richtig Du willst endlich verstehen, was INNER JOIN, LEFT JOIN \u0026amp; Co. in T-SQL wirklich machen? Perfekt! In diesem Blogbeitrag nehmen wir dich Schritt fÃ¼r Schritt mit in die Welt der TabellenverknÃ¼pfungen. Zielgruppe sind Business-Analysten und Power-User, die mit Azure Data Studio arbeiten und hÃ¤ufig mit relationalen Datenmodellen zu tun haben.\nWas sind JOINs und warum brauchst du sie? In relationalen Datenbanken wie SQL Server werden Daten logisch getrennt in Tabellen gespeichert. JOINs sind die BrÃ¼cken zwischen diesen Tabellen. Du kannst damit z. B. Kundendaten mit den zugehÃ¶rigen Bestellungen verknÃ¼pfen oder fÃ¼r jedes Produkt anzeigen, wie oft es bestellt wurde.\nStatt alles in eine riesige Tabelle zu stopfen, bleibst du flexibel und effizient â€“ JOINs holen sich genau die Infos, die du brauchst.\nUnser Praxisbeispiel: Kunden, Bestellungen und Produkte Wir arbeiten mit drei Tabellen:\nKunden (Kunden) Bestellungen (Bestellungen) Produkte (Produkte) Tabellenstruktur (vereinfacht) 1-- Kunden 2KundenID | Name 3---------|------------ 41 | MÃ¼ller GmbH 52 | Schulz AG 6 7-- Bestellungen 8BestellID | KundenID | ProduktID | Menge 9----------|----------|-----------|------ 101001 | 1 | 501 | 2 111002 | 2 | 502 | 1 121003 | 1 | 503 | 5 13 14-- Produkte 15ProduktID | Produktname | Preis 16----------|---------------|------ 17501 | Laptop | 1200 18502 | Monitor | 300 19503 | Maus | 25 Tabellenbeziehungen erklÃ¤rt KundenID in Bestellungen ist ein FremdschlÃ¼ssel, der auf Kunden zeigt. ProduktID in Bestellungen zeigt auf Produkte. Damit ist klar: Eine Bestellung ist einem Kunden zugeordnet und enthÃ¤lt ein Produkt.\nJOIN-Typen im Ãœberblick (mit Visualisierung) Hier siehst du die wichtigsten JOINs als vereinfachte Darstellung (Legende: â¬¤ = Ergebnismenge):\nINNER JOIN â€“ Nur was zusammenpasst Zeigt nur Zeilen, bei denen in beiden Tabellen ein passender Eintrag existiert.\n1Kunden Bestellungen 2 â–¡ â–¡ 3 \\ / 4 â¬¤ INNER JOIN 1SELECT K.Name, B.ProduktID 2FROM Kunden K 3INNER JOIN Bestellungen B ON K.KundenID = B.KundenID; LEFT JOIN â€“ Alle Kunden, auch ohne Bestellung Nimm alle Kunden, und falls Bestellungen existieren, zeig sie.\n1Kunden Bestellungen 2 â–¡ â–¡ 3 |\\ / 4 |â¬¤ LEFT JOIN 1SELECT K.Name, B.ProduktID 2FROM Kunden K 3LEFT JOIN Bestellungen B ON K.KundenID = B.KundenID; RIGHT JOIN â€“ Alle Bestellungen, auch ohne Kunden (selten sinnvoll) Gegenteil von LEFT JOIN. Wird selten verwendet, weil \u0026ldquo;verwaiste Bestellungen\u0026rdquo; meist Datenfehler sind.\n1SELECT K.Name, B.ProduktID 2FROM Kunden K 3RIGHT JOIN Bestellungen B ON K.KundenID = B.KundenID; FULL OUTER JOIN â€“ Alles zeigen, was da ist Nimm alles aus beiden Tabellen, egal ob passend oder nicht.\n1SELECT K.Name, B.ProduktID 2FROM Kunden K 3FULL OUTER JOIN Bestellungen B ON K.KundenID = B.KundenID; BONUS: Drei Tabellen verknÃ¼pfen 1SELECT K.Name, P.Produktname, B.Menge 2FROM Bestellungen B 3JOIN Kunden K ON B.KundenID = K.KundenID 4JOIN Produkte P ON B.ProduktID = P.ProduktID; Das ergibt z.â€¯B.:\n1Name | Produktname | Menge 2------------|-------------|------ 3MÃ¼ller GmbH | Laptop | 2 4Schulz AG | Monitor | 1 5MÃ¼ller GmbH | Maus | 5 Performance Tipp Wenn zwischen 2 Tabellen eine Beziehung eingerichtet wurde sind diese Join Abfragen schneller. Daher nie abkÃ¼rzen sondern auch dazwischen liegende Tabellen mit in die VerknÃ¼pfung einbeziehen. Auch wenn aus dieser mittleren Tabelle keine Daten benÃ¶tigt werden ist die Abfrage wesentlich schneller.\nZusammenfassung JOINs sind essenziell, um Daten aus mehreren Tabellen sinnvoll zu kombinieren. INNER JOIN zeigt nur Treffer, LEFT JOIN nimmt alles links mit, FULL OUTER JOIN zeigt alles. FÃ¼r Business-Analysten und Power-User in Azure Data Studio ist das VerstÃ¤ndnis von JOINs entscheidend fÃ¼r gute Reports. Neugierig auf mehr? Du willst noch tiefer in TSQL einsteigen oder JOINs anhand deiner eigenen Datenbankstruktur trainieren? Dann melde dich gerne fÃ¼r ein individuelles Seminar oder eine Beratungssession mit mir! Auch freie Softwareentwickler profitieren von strukturierten SQL-Trainings fÃ¼r ihre Kundenprojekte.\nJetzt Kontakt aufnehmen\n","permalink":"https://attilakrick.com/posts/t-sql/join/","summary":"\u003ch2 id=\"t-sql-joins-fÃ¼r-einsteiger-so-verknÃ¼pfst-du-deine-daten-richtig\"\u003eT-SQL JOINs fÃ¼r Einsteiger: So verknÃ¼pfst du deine Daten richtig\u003c/h2\u003e\n\u003cp\u003eDu willst endlich verstehen, was INNER JOIN, LEFT JOIN \u0026amp; Co. in T-SQL wirklich machen? Perfekt! In diesem Blogbeitrag nehmen wir dich Schritt fÃ¼r Schritt mit in die Welt der TabellenverknÃ¼pfungen. Zielgruppe sind Business-Analysten und Power-User, die mit Azure Data Studio arbeiten und hÃ¤ufig mit relationalen Datenmodellen zu tun haben.\u003c/p\u003e\n\u003ch3 id=\"was-sind-joins-und-warum-brauchst-du-sie\"\u003eWas sind JOINs und warum brauchst du sie?\u003c/h3\u003e\n\u003cp\u003eIn relationalen Datenbanken wie SQL Server werden Daten logisch getrennt in Tabellen gespeichert. JOINs sind die BrÃ¼cken zwischen diesen Tabellen. Du kannst damit z. B. Kundendaten mit den zugehÃ¶rigen Bestellungen verknÃ¼pfen oder fÃ¼r jedes Produkt anzeigen, wie oft es bestellt wurde.\u003c/p\u003e","title":"T-SQL JOINs fÃ¼r Einsteiger â€“ So verknÃ¼pfst du deine Daten richtig"},{"content":"So vermittle ich Wissen: Direkte Instruktion trifft auf InteraktivitÃ¤t Als IT-Trainer fÃ¼r PowerShell, .NET und TSQL habe ich in den letzten Jahren eins gelernt: Der effektivste Weg, technisches Wissen zu vermitteln, ist eine Mischung aus klarer, direkter Instruktion und interaktiven Lernphasen. In diesem Beitrag zeige ich dir, wie ich diesen Ansatz in meinen Seminaren (ob vor Ort oder online) anwende â€“ und warum er sich in der Praxis bewÃ¤hrt hat.\nWarum reine Wissensvermittlung nicht reicht Klar, du kannst ein PowerShell-Modul in einer Stunde erklÃ¤ren. Aber ob es wirklich hÃ¤ngen bleibt? Das ist die groÃŸe Frage. Aus der Didaktik weiÃŸ man: ZuhÃ¶ren allein bringt wenig, wenn das GehÃ¶rte nicht selbst angewendet, diskutiert oder hinterfragt wird. Deshalb kombiniere ich in meinen Seminaren kurze Inputphasen mit gezielten Aktivierungen.\nAufbau einer typischen Trainingseinheit Egal ob Thema \u0026ldquo;.NET Entity Framework\u0026rdquo;, \u0026ldquo;TSQL-Abfragen optimieren\u0026rdquo; oder \u0026ldquo;PowerShell-Fehlerbehandlung\u0026rdquo; â€“ der Aufbau bleibt Ã¤hnlich:\n1. Direkte Instruktion (15â€“20 Minuten) Ich starte mit einer fokussierten EinfÃ¼hrung: Was ist das Problem? Welche Konzepte brauchst du? Was musst du verstehen, bevor du in die Praxis gehst? Das Ganze klar, strukturiert und mit Beispielen aus dem echten Berufsalltag.\nBeispiel: Beim Thema PowerShell-Remoting erklÃ¤re ich kurz die Architektur, den Unterschied zwischen One-to-One und One-to-Many, und welche Sicherheitsaspekte du beachten musst.\n2. Mini-Ãœbung oder Selbstversuch (5â€“15 Minuten) Danach folgt eine kleine Aufgabe â€“ am besten sofort. Zum Beispiel:\n\u0026ldquo;Stelle eine PowerShell-Session zu einem anderen Rechner her und gib dir selbst Adminrechte.\u0026rdquo;\nOder:\n\u0026ldquo;Analysiere diesen TSQL-Queryplan und finde den Flaschenhals.\u0026rdquo;\nDas Ziel: Du setzt das Gelernte direkt um, und ich sehe, wo du vielleicht noch hÃ¤ngst.\n3. Diskussion \u0026amp; Austausch (10 Minuten) Interaktive Phase: Ich stelle Fragen, du stellst Fragen, wir diskutieren LÃ¶sungsansÃ¤tze. Gerade in Online-Trainings nutze ich hier Breakout-RÃ¤ume oder geteilte Whiteboards. In der PrÃ¤senz reicht oft ein Flipchart und ein bisschen Humor.\n4. SelbststÃ¤ndige Vertiefung (20+ Minuten) Zum Abschluss kommt meist eine etwas grÃ¶ÃŸere Aufgabe oder ein Mini-Projekt, das du allein oder im Duo lÃ¶st. Zum Beispiel:\nErstelle ein PowerShell-Skript, das alle Prozesse eines Remote-PCs loggt und bei kritischer CPU-Auslastung Alarm schlÃ¤gt. Implementiere einen kleinen .NET-Service, der SQL-Daten Ã¼ber eine API bereitstellt. Ich bin in dieser Phase eher Coach als Dozent â€“ stehe bereit, aber greife nicht sofort ein.\nWarum das funktioniert Diese Methode ist kein Hexenwerk, aber extrem wirkungsvoll. Du bekommst:\nStruktur \u0026amp; Klarheit durch die direkte Instruktion Praxiserfahrung durch gezielte Aufgaben VerstÃ¤ndnis \u0026amp; Reflexion durch Diskussion Selbstbewusstsein durch eigenstÃ¤ndige LÃ¶sung von Aufgaben Und das Beste: Du kannst das Gelernte sofort auf deinen Arbeitsalltag Ã¼bertragen. Ob als Administrator, freier Softwareentwicklerin oder Datenbank-Profi â€“ du profitierst direkt.\nFazit Meine Seminare leben vom Wechselspiel aus Input und Interaktion. Das heiÃŸt: Du bekommst nicht nur Theorie, sondern auch konkrete Tools und Techniken, um dein Wissen in der Praxis anzuwenden. Genau das macht den Unterschied zwischen â€žGehÃ¶rtâ€œ und â€žGelerntâ€œ.\nNeugierig geworden? Wenn du selbst erleben willst, wie abwechslungsreich und effektiv ein technisches Seminar sein kann, dann melde dich gerne bei mir. Egal ob du PowerShell meistern, deine .NET-Skills ausbauen oder TSQL endlich richtig durchdringen willst â€“ gemeinsam bringen wir dein Know-how auf das nÃ¤chste Level. Jetzt Kontakt aufnehmen und mehr erfahren!\n","permalink":"https://attilakrick.com/posts/allgemein/methode_direkte_instruktion/","summary":"\u003ch2 id=\"so-vermittle-ich-wissen-direkte-instruktion-trifft-auf-interaktivitÃ¤t\"\u003eSo vermittle ich Wissen: Direkte Instruktion trifft auf InteraktivitÃ¤t\u003c/h2\u003e\n\u003cp\u003eAls IT-Trainer fÃ¼r PowerShell, .NET und TSQL habe ich in den letzten Jahren eins gelernt: Der effektivste Weg, technisches Wissen zu vermitteln, ist eine Mischung aus klarer, direkter Instruktion und interaktiven Lernphasen. In diesem Beitrag zeige ich dir, wie ich diesen Ansatz in meinen Seminaren (ob vor Ort oder online) anwende â€“ und warum er sich in der Praxis bewÃ¤hrt hat.\u003c/p\u003e","title":"So vermittle ich Wissen: Direkte Instruktion trifft auf InteraktivitÃ¤t"},{"content":"Ich bin Attila Krick, selbststÃ¤ndiger Experte fÃ¼r PowerShell, T-SQL und .NET mit Ã¼ber 30 Jahren praktischer Erfahrung. Ich unterstÃ¼tze Unternehmen und IT-Abteilungen dabei, effiziente SoftwarelÃ¶sungen zu entwickeln, Prozesse zu automatisieren und internes Fachwissen aufzubauen. Die LÃ¶sungen, die ich entwickle, sind so konzipiert, dass Kunden diese spÃ¤ter eigenstÃ¤ndig anpassen und erweitern kÃ¶nnen.\nMeine Leistungen: PowerShell, .NET \u0026amp; SQL-Optimierung fÃ¼r IT-Experten Ich biete meine Schulungen, Workshops und VortrÃ¤ge sowohl vor Ort als auch remote/online an, um maximale FlexibilitÃ¤t fÃ¼r Unternehmen und Teilnehmer zu gewÃ¤hrleisten.\nPowerShell Entwicklung und Optimierung von Automatisierungs-Skripten PowerShell-Schulungen fÃ¼r Einsteiger, Fortgeschrittene \u0026amp; Experten Sicherheitsanalysen und MaÃŸnahmen gegen Schwachstellen .NET-Entwicklung Entwicklung von Client-/Server-Anwendungen, WPF, Webservices und Backend-Diensten .NET-Beratung fÃ¼r Unternehmen und IT-Abteilungen UnterstÃ¼tzung bestehender Entwicklerteams SQL Server Datenbankdesign, Administration und Performance-Optimierung SQL-Schulungen fÃ¼r Administratoren, Entwickler und Nicht-Techniker Content \u0026amp; Dokumentation Erstellung von SEO-optimierten Fachartikeln fÃ¼r Blogs und technische Dokumentationen Entwicklung individueller Seminar-Dokumentationen als PDF oder in gedruckter Form Kunden \u0026amp; Praxisbeispiele AusgewÃ¤hlte Kunden Schulungen \u0026amp; Workshops: GFU AG, ComConsult GmbH, Bechtle AG Projektumsetzung \u0026amp; Beratung: Ã–ffentlicher Dienst, Zulieferindustrie, kommunale Verwaltungen Erfolgsgeschichten aus Projekten Effizienzsteigerung durch PowerShell-Automatisierung âœ… Problem: Ein Kunde musste tÃ¤glich manuell 500+ Benutzerkonten in Active Directory verwalten.\nâœ… LÃ¶sung: Entwicklung eines PowerShell-Skripts zur Automatisierung der Verwaltung.\nâœ… Ergebnis: Einsparung von Ã¼ber 15 Arbeitsstunden pro Woche.\nSQL Performance-Tuning fÃ¼r schnelleres Reporting âœ… Problem: Langsame SQL-Abfragen verhinderten Echtzeitanalysen im Controlling.\nâœ… LÃ¶sung: Index-Optimierung und Refactoring ineffizienter Stored Procedures.\nâœ… Ergebnis: Abfragen liefen 85% schneller, wodurch Berichte in Minuten statt Stunden verfÃ¼gbar waren.\nWarum Kunden mit mir zusammenarbeiten Tiefes und breites Wissen in IT, Mechanik, Elektronik, PÃ¤dagogik, kaufmÃ¤nnischen und militÃ¤rischen Bereichen Ãœber 1500 erfolgreiche Trainingstage Individuelle Beratung und maÃŸgeschneiderte LÃ¶sungen Flexibel einsetzbar remote \u0026amp; vor Ort (europaweit) Klare und verstÃ¤ndliche Kommunikation auf technischer und Management-Ebene Kundenstimmen \u0026ldquo;Entwickler wusste, wovon er redet, und man hat gemerkt, dass er viel Expertise besitzt.\u0026rdquo; \u0026ldquo;Attila ist fachlich sehr gut aufgestellt, was es ihm erleichtert, Wissen zu vermitteln.\u0026rdquo; \u0026ldquo;WÃ¤hrend des gesamten Seminars wurde es nicht langweilig. Attila hat das Thema so spannend gemacht, wie es geht!\u0026rdquo; \u0026ldquo;Sehr professionell mit einem riesigen Wissensspektrum. Themen wurden strukturiert angegangen und Fragen prÃ¤zise beantwortet.\u0026rdquo; \u0026ldquo;Trainer war klasse. Attila gibt sich viel MÃ¼he und geht auf jede Frage ein.\u0026rdquo; \u0026ldquo;Auf alle Fragen wurde eingegangen. Antworten waren klar und verstÃ¤ndlich, mit Fokus auf selbststÃ¤ndige Anwendung.\u0026rdquo; Kontakt \u0026amp; Zusammenarbeit Interessiert an einer Zusammenarbeit? Ich freue mich auf Ihre Anfrage!\nðŸ“§ Kontakt aufnehmen\n","permalink":"https://attilakrick.com/leistungen/","summary":"\u003cp\u003eIch bin Attila Krick, selbststÃ¤ndiger Experte fÃ¼r \u003cstrong\u003ePowerShell\u003c/strong\u003e, \u003cstrong\u003eT-SQL\u003c/strong\u003e und \u003cstrong\u003e.NET\u003c/strong\u003e mit Ã¼ber 30 Jahren praktischer Erfahrung. Ich unterstÃ¼tze Unternehmen und IT-Abteilungen dabei, effiziente SoftwarelÃ¶sungen zu entwickeln, Prozesse zu automatisieren und internes Fachwissen aufzubauen. Die LÃ¶sungen, die ich entwickle, sind so konzipiert, dass Kunden diese spÃ¤ter eigenstÃ¤ndig anpassen und erweitern kÃ¶nnen.\u003c/p\u003e\n\u003ch2 id=\"meine-leistungen-powershell-net--sql-optimierung-fÃ¼r-it-experten\"\u003eMeine Leistungen: PowerShell, .NET \u0026amp; SQL-Optimierung fÃ¼r IT-Experten\u003c/h2\u003e\n\u003cp\u003eIch biete meine \u003cstrong\u003eSchulungen, Workshops und VortrÃ¤ge sowohl vor Ort als auch remote/online an\u003c/strong\u003e, um maximale FlexibilitÃ¤t fÃ¼r Unternehmen und Teilnehmer zu gewÃ¤hrleisten.\u003c/p\u003e","title":"IT-Dienstleistungen \u0026 Schulungen"},{"content":"Warum PowerShell mit VS Code nutzen? Viele Entwickler und IT-Administratoren setzen Visual Studio Code (VS Code) als bevorzugte Entwicklungsumgebung fÃ¼r PowerShell-Skripte ein. Die Kombination aus leichtgewichtigem Editor, leistungsstarken Erweiterungen und integrierten Debugging-Features macht VS Code zu einer idealen Plattform fÃ¼r PowerShell-Entwicklung. ZusÃ¤tzlich ermÃ¶glicht es eine einheitliche Entwicklungserfahrung Ã¼ber verschiedene Betriebssysteme hinweg, da VS Code sowohl unter Windows als auch auf macOS und Linux verfÃ¼gbar ist.\nInstallation der PowerShell-Erweiterung Damit VS Code PowerShell optimal unterstÃ¼tzt, benÃ¶tigst du die PowerShell-Erweiterung. Diese bietet:\nSyntaxhervorhebung fÃ¼r besser lesbaren Code IntelliSense fÃ¼r AutovervollstÃ¤ndigung und Parameterhilfe Debugging-Funktionen, um Skripte effizient zu testen Integrierte PowerShell-Konsole fÃ¼r direkten Code-Output Erweiterte Fehleranalyse fÃ¼r bessere Fehlersuche Schritte zur Installation VS Code herunterladen und installieren\nDownload VS Code PowerShell-Erweiterung hinzufÃ¼gen\nÃ–ffne VS Code Gehe zu Erweiterungen (Ctrl + Shift + X) Suche nach PowerShell Klicke auf Installieren PowerShell als Standard-Terminal setzen\nÃ–ffne die Einstellungen (Strg + ,) Suche nach terminal.integrated.defaultProfile.windows Setze den Wert auf PowerShell VS Code fÃ¼r PowerShell optimieren Automatische Formatierung aktivieren Um sicherzustellen, dass dein Code sauber und einheitlich bleibt, kannst du die Auto-Formatierung aktivieren:\nÃ–ffne die VS Code Einstellungen (Strg + ,). Suche nach editor.formatOnSave. Setze den Wert auf true. 1\u0026#34;editor.formatOnSave\u0026#34;: true Standard-Terminal auf PowerShell setzen Falls VS Code ein anderes Terminal nutzt, kannst du es wie folgt Ã¤ndern:\nGehe zu den Einstellungen (Strg + ,). Suche nach terminal.integrated.defaultProfile.windows. Setze den Wert auf PowerShell. 1\u0026#34;terminal.integrated.defaultProfile.windows\u0026#34;: \u0026#34;PowerShell\u0026#34; Erweiterte Tastenkombinationen fÃ¼r PowerShell nutzen Aktuelle Zeile ausfÃ¼hren: In .ps1-Dateien kann die aktuelle Zeile mit F8 ausgefÃ¼hrt werden. Skript starten: DrÃ¼cke F5, um das gesamte Skript auszufÃ¼hren. Fehlersuche starten: Setze einen Breakpoint und starte das Debugging mit F5. Debugging von PowerShell-Skripten Eine der grÃ¶ÃŸten StÃ¤rken von VS Code ist das integrierte Debugging fÃ¼r PowerShell. So kannst du Fehler schneller finden und beheben.\nBreakpoints setzen und Debugging starten Breakpoint setzen: Klicke links neben eine Zeilennummer. Debugging starten (F5). Variablen Ã¼berwachen und durch den Code schrittweise gehen. Eingabeaufforderung fÃ¼r interaktives Debugging nutzen, um Werte in Echtzeit zu verÃ¤ndern. Tipps fÃ¼r eine produktive Umgebung ZusÃ¤tzliche VS Code Extensions \u0026ldquo;Bracket Pair Colorizer\u0026rdquo; fÃ¼r farbige Klammern \u0026ldquo;Code Spell Checker\u0026rdquo; fÃ¼r weniger Tippfehler \u0026ldquo;PowerShell Pro Tools\u0026rdquo; fÃ¼r erweiterte Skriptfunktionen Fazit Die Integration von PowerShell in Visual Studio Code macht die Entwicklung deutlich komfortabler und effizienter. Mit der richtigen Konfiguration, Debugging-Tools und erweiterten Features kannst du produktiver arbeiten und deine Skripte schneller optimieren.\nNutze die gezeigten Einstellungen und steigere deine ProduktivitÃ¤t mit VS Code und PowerShell!\n","permalink":"https://attilakrick.com/posts/powershell/vscode_starter/","summary":"\u003ch2 id=\"warum-powershell-mit-vs-code-nutzen\"\u003eWarum PowerShell mit VS Code nutzen?\u003c/h2\u003e\n\u003cp\u003eViele Entwickler und IT-Administratoren setzen \u003cem\u003eVisual Studio Code (VS Code)\u003c/em\u003e als bevorzugte Entwicklungsumgebung fÃ¼r PowerShell-Skripte ein. Die Kombination aus \u003cem\u003eleichtgewichtigem Editor, leistungsstarken Erweiterungen und integrierten Debugging-Features\u003c/em\u003e macht VS Code zu einer idealen Plattform fÃ¼r PowerShell-Entwicklung. ZusÃ¤tzlich ermÃ¶glicht es eine einheitliche Entwicklungserfahrung Ã¼ber verschiedene Betriebssysteme hinweg, da VS Code sowohl unter Windows als auch auf macOS und Linux verfÃ¼gbar ist.\u003c/p\u003e\n\u003ch2 id=\"installation-der-powershell-erweiterung\"\u003eInstallation der PowerShell-Erweiterung\u003c/h2\u003e\n\u003cp\u003eDamit VS Code PowerShell optimal unterstÃ¼tzt, benÃ¶tigst du die \u003cstrong\u003ePowerShell-Erweiterung\u003c/strong\u003e. Diese bietet:\u003c/p\u003e","title":"Integration von PowerShell in Visual Studio Code"},{"content":"Warum sollte man die PowerShell-Hilfe nutzen? PowerShell ist ein mÃ¤chtiges Werkzeug, aber die Vielzahl an Cmdlets, Parametern und MÃ¶glichkeiten kann Ã¼berwÃ¤ltigend sein. Die integrierte Hilfe erleichtert den Einstieg und hilft dir, effizient zu arbeiten, indem sie dir schnell die benÃ¶tigten Informationen liefert. Sie ist:\nOffline verfÃ¼gbar - keine Internetverbindung erforderlich. Direkt integriert - kein zusÃ¤tzliches Tool notwendig. Kontextbezogen - zeigt relevante Parameter und Beispiele fÃ¼r das gewÃ¤hlte Cmdlet. Flexibel - von kurzen Zusammenfassungen bis hin zu detaillierten AnwendungsfÃ¤llen. Gerade fÃ¼r Administratoren, Entwickler und Automatisierungsaufgaben ist es unerlÃ¤sslich, die Hilfe effektiv zu nutzen.\nDie PowerShell-Hilfe aktualisieren StandardmÃ¤ÃŸig ist die Hilfe in PowerShell nicht vollstÃ¤ndig installiert. Daher sollte sie einmalig heruntergeladen und regelmÃ¤ÃŸig aktualisiert werden:\n1Update-Help -Module * -UICulture en-US Dadurch erhÃ¤ltst du die neuesten Hilfedateien fÃ¼r deine PowerShell-Version und kannst auch offline darauf zugreifen.\nHilfe zu einem bestimmten Cmdlet abrufen Um die Hilfe fÃ¼r ein spezifisches Cmdlet anzuzeigen, verwende Get-Help:\n1Get-Help Get-Process Dadurch erhÃ¤ltst du eine Kurzbeschreibung. Wenn du mehr Details benÃ¶tigst:\n1Get-Help Get-Process -Detailed FÃ¼r konkrete Anwendungsbeispiele:\n1Get-Help Get-Process -Examples Falls du die komplette Dokumentation mit allen Parametern und ErklÃ¤rungen sehen willst:\n1Get-Help Get-Process -Full Falls du eine grafische Darstellung bevorzugst, gibt es diese MÃ¶glichkeit:\n1Get-Help Get-Process -ShowWindow about_-Themen fÃ¼r tiefere Einblicke nutzen Neben der Hilfe fÃ¼r einzelne Cmdlets gibt es auch Dokumentationen zu grundlegenden Konzepten von PowerShell. Diese sind unter about_-Themen erreichbar:\n1Get-Help about_Functions Das zeigt eine EinfÃ¼hrung in PowerShell-Funktionen. Weitere nÃ¼tzliche Themen sind:\nabout_Variables - alles Ã¼ber Variablen about_Scripts - Skripting-Grundlagen about_Execution_Policies - Sicherheitsrichtlinien fÃ¼r Skripte Du kannst die verfÃ¼gbaren about_-Themen auflisten mit:\n1Get-Help about_* Alternative Quellen: VS Code, Copilot \u0026amp; Co Neben der eingebauten Hilfe gibt es weitere MÃ¶glichkeiten, um Informationen zu PowerShell zu erhalten:\nVS Code mit PowerShell-Extension bietet AutovervollstÃ¤ndigung und Tooltips fÃ¼r Cmdlets. GitHub \u0026amp; Microsoft-Dokumentation enthalten offizielle Anleitungen. Chatbots und KI-Tools wie GitHub Copilot kÃ¶nnen CodevorschlÃ¤ge liefern, aber nicht immer korrekt sein. Fazit Die PowerShell-Hilfe ist ein unverzichtbares Werkzeug, um effizient zu arbeiten. Nutze sie regelmÃ¤ÃŸig, um dein Wissen zu erweitern und schneller LÃ¶sungen zu finden. Teste jetzt die gezeigten Befehle in deiner PowerShell-Session! ðŸš€\n","permalink":"https://attilakrick.com/posts/powershell/powershell-hilfe_nutzen/","summary":"\u003ch2 id=\"warum-sollte-man-die-powershell-hilfe-nutzen\"\u003eWarum sollte man die PowerShell-Hilfe nutzen?\u003c/h2\u003e\n\u003cp\u003ePowerShell ist ein mÃ¤chtiges Werkzeug, aber die Vielzahl an Cmdlets, Parametern und MÃ¶glichkeiten kann Ã¼berwÃ¤ltigend sein. Die integrierte Hilfe erleichtert den Einstieg und hilft dir, effizient zu arbeiten, indem sie dir schnell die benÃ¶tigten Informationen liefert. Sie ist:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOffline verfÃ¼gbar\u003c/strong\u003e - keine Internetverbindung erforderlich.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDirekt integriert\u003c/strong\u003e - kein zusÃ¤tzliches Tool notwendig.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKontextbezogen\u003c/strong\u003e - zeigt relevante Parameter und Beispiele fÃ¼r das gewÃ¤hlte Cmdlet.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlexibel\u003c/strong\u003e - von kurzen Zusammenfassungen bis hin zu detaillierten AnwendungsfÃ¤llen.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGerade fÃ¼r Administratoren, Entwickler und Automatisierungsaufgaben ist es unerlÃ¤sslich, die Hilfe effektiv zu nutzen.\u003c/p\u003e","title":"Wie man die PowerShell-Hilfe benutzt"},{"content":"Best Practices fÃ¼r PowerShell-Skripting 1. Verwende aussagekrÃ¤ftige Variablennamen Nutze sprechende Variablennamen, um die Lesbarkeit und Wartbarkeit zu verbessern:\n1$logDateiPfad = \u0026#34;C:\\Logs\\error.log\u0026#34; 2$benutzerListe = Get-ADUser -Filter * 2. Kommentare fÃ¼r bessere VerstÃ¤ndlichkeit FÃ¼ge sinnvolle Kommentare hinzu, um die Nachvollziehbarkeit zu erhÃ¶hen:\n1# Ermittelt alle aktiven Benutzer und speichert sie in einer Variablen 2$aktiveBenutzer = Get-ADUser -Filter {Enabled -eq $true} 3. Nutze Try-Catch-Finally fÃ¼r Fehlerbehandlung Ein gutes Fehlerhandling macht Skripte robuster:\n1Try { 2 Get-Item \u0026#34;C:\\NichtVorhandeneDatei.txt\u0026#34; 3} Catch { 4 Write-Host \u0026#34;Fehler: $_\u0026#34; -ForegroundColor Red 5} Finally { 6 Write-Host \u0026#34;Skript abgeschlossen.\u0026#34; 7} 4. Setze Funktionen fÃ¼r wiederverwendbaren Code ein Funktionen helfen, Code sauber zu strukturieren:\n1Function Get-FreierSpeicher { 2 Param($Laufwerk) 3 Get-PSDrive -Name $Laufwerk | Select-Object Used, Free 4} 5. Verwende Module fÃ¼r grÃ¶ÃŸere Projekte Strukturiere grÃ¶ÃŸere Skripte mit Modulen:\n1New-ModuleManifest -Path \u0026#34;C:\\MeinModul\\MeinModul.psd1\u0026#34; 6. Parameter validieren Nutze [Validate*]-Attribute, um Parameter sicherer zu machen:\n1Function Set-BenutzerPasswort { 2 Param( 3 [Parameter(Mandatory)] 4 [ValidatePattern(\u0026#34;^[a-zA-Z0-9]{8,}$\u0026#34;)] 5 [string]$NeuesPasswort 6 ) 7 # Passwort setzen 8} 7. Logging in Skripten implementieren Protokolliere wichtige Aktionen, um Fehler zu analysieren:\n1Function Write-Log { 2 Param([string]$Nachricht) 3 \u0026#34;$(Get-Date) - $Nachricht\u0026#34; | Out-File \u0026#34;C:\\Logs\\script.log\u0026#34; -Append 4} 8. Automatisierte Tests mit Pester nutzen Verwende Pester, um Skripte zu testen:\n1Describe \u0026#34;Get-FreierSpeicher Tests\u0026#34; { 2 It \u0026#34;Soll eine Ausgabe mit Werten haben\u0026#34; { 3 Get-FreierSpeicher C | Should -Not -BeNullOrEmpty 4 } 5} 9. Skripte digital signieren Sicherheit erhÃ¶hen durch signierte Skripte:\n1Set-AuthenticodeSignature -FilePath \u0026#34;MeinSkript.ps1\u0026#34; -Certificate (Get-ChildItem Cert:\\CurrentUser\\My -CodeSigningCert) 10. Performance optimieren Nutze effiziente Methoden fÃ¼r hohe Performance:\n1# Vermeide langsame Schleifen mit ForEach-Object 2$BenutzerNamen = (Get-ADUser -Filter *).SamAccountName ","permalink":"https://attilakrick.com/posts/powershell/best_practices_powershell_skripting/","summary":"\u003ch2 id=\"best-practices-fÃ¼r-powershell-skripting\"\u003eBest Practices fÃ¼r PowerShell-Skripting\u003c/h2\u003e\n\u003ch3 id=\"1-verwende-aussagekrÃ¤ftige-variablennamen\"\u003e1. Verwende aussagekrÃ¤ftige Variablennamen\u003c/h3\u003e\n\u003cp\u003eNutze sprechende Variablennamen, um die Lesbarkeit und Wartbarkeit zu verbessern:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59\"\u003e1\u003c/span\u003e\u003cspan\u003e$logDateiPfad = \u003cspan style=\"color:#b8bb26\"\u003e\u0026#34;C:\\Logs\\error.log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59\"\u003e2\u003c/span\u003e\u003cspan\u003e$benutzerListe = \u003cspan style=\"color:#fabd2f\"\u003eGet-ADUser\u003c/span\u003e -Filter *\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-kommentare-fÃ¼r-bessere-verstÃ¤ndlichkeit\"\u003e2. Kommentare fÃ¼r bessere VerstÃ¤ndlichkeit\u003c/h3\u003e\n\u003cp\u003eFÃ¼ge sinnvolle Kommentare hinzu, um die Nachvollziehbarkeit zu erhÃ¶hen:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e# Ermittelt alle aktiven Benutzer und speichert sie in einer Variablen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59\"\u003e2\u003c/span\u003e\u003cspan\u003e$aktiveBenutzer = \u003cspan style=\"color:#fabd2f\"\u003eGet-ADUser\u003c/span\u003e -Filter {Enabled \u003cspan style=\"color:#fe8019\"\u003e-eq\u003c/span\u003e $true}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-nutze-try-catch-finally-fÃ¼r-fehlerbehandlung\"\u003e3. Nutze \u003ccode\u003eTry-Catch-Finally\u003c/code\u003e fÃ¼r Fehlerbehandlung\u003c/h3\u003e\n\u003cp\u003eEin gutes Fehlerhandling macht Skripte robuster:\u003c/p\u003e","title":"PowerShell-Scripting Best Practices - Effiziente Automatisierung und Sicherheit"},{"content":"PowerShell 7.6 und PowerShell 7.5: Was ist neu? PowerShell 7.5 und 7.6 bringen viele neue Funktionen mit sich. Es basiert auch auf .NET 9, was bedeutet, dass es keinen Long-Term Support (LTS) hat.\nIn diesem Artikel werfen wir einen Blick auf die wichtigsten Neuerungen in PowerShell 7.5 und 7.6, erklÃ¤ren die Unterschiede und geben eine Empfehlung, ob sich ein Upgrade lohnt.\nEmpfehlung: Lohnt sich der Umstieg auf PowerShell 7.5 bzw. 7.6 ? FÃ¼r produktive Umgebungen:\nBleibe bei PowerShell 7.4 (LTS), da PowerShell 7.6 und 7.5 kein LTS-Support hat und 7.6 sich noch in der Preview-Phase befindet.\nFÃ¼r Entwickler \u0026amp; Power-User:\nPowerShell 7.6 bietet spannende neue Features und ist ideal fÃ¼r Tests oder fÃ¼r Benutzer, die immer die neuesten Funktionen ausprobieren mÃ¶chten.\nWarte auf PowerShell 8.0, wenn du LTS-UnterstÃ¼tzung benÃ¶tigst. PowerShell 7.5: Die wichtigsten Neuerungen PowerShell 7.5 wurde als stabile Version verÃ¶ffentlicht und enthÃ¤lt viele Optimierungen:\nVerbesserte JSON-Verarbeitung PowerShell 7.5 verbessert die ConvertTo-Json-Funktion, um groÃŸe und komplexe Objekte besser zu serialisieren.\n1$Data = @{ 2 Name = \u0026#34;PowerShell 7.5\u0026#34; 3 Features = @(\u0026#34;Optimierte JSON-Ausgabe\u0026#34;, \u0026#34;Mehr Sicherheit\u0026#34;, \u0026#34;Neue Cmdlets\u0026#34;) 4} 5$Data | ConvertTo-Json -Depth 3 Optimierte Sicherheit und Signierung UnterstÃ¼tzung fÃ¼r Windows Defender Application Control (WDAC), um Skripte besser abzusichern. Erweiterte Sicherheitsfunktionen fÃ¼r Set-AuthenticodeSignature. Neue Cmdlets in PowerShell 7.5 PowerShell 7.5 fÃ¼hrte mehrere neue Cmdlets ein:\nInvoke-PSCommand - Verbesserte Remoting-Steuerung. Get-ProcessInfo - Detailliertere ProzessÃ¼berwachung. Start-PSProfile - LeistungsÃ¼berwachung fÃ¼r PowerShell-Skripte. PowerShell 7.6: Was ist neu? PowerShell 7.6 bringt weitere Verbesserungen mit sich.\nNeue Cmdlets in PowerShell 7.6 PowerShell 7.6 bringt neun neue Cmdlets mit:\nGet-FileHash - UnterstÃ¼tzt nun SHA-3. Test-JsonSchema - PrÃ¼ft JSON-Daten auf Schema-KonformitÃ¤t. ConvertFrom-Base64 / ConvertTo-Base64 - Base64 Encoding/Decoding direkt in PowerShell. Get-CommandHistory - Erweitert die Verwaltung der Befehls-Historie. Invoke-RestMethod - Verbesserte Fehlerbehandlung. Test-NetworkConnection - Bessere NetzwerkprÃ¼fung. Get-EnvironmentVariable - Neuer Zugriff auf Umgebungsvariablen. Set-Clipboard / Get-Clipboard - Verbesserte Copy-Paste-FunktionalitÃ¤t. Beispiel fÃ¼r ConvertFrom-Base64:\n1$encoded = \u0026#34;SGVsbG8gV2VsdA==\u0026#34; 2[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encoded)) Verbesserte ForEach-Object -Parallel Verarbeitung PowerShell 7.6 verbessert das Multithreading erheblich:\n11..10 | ForEach-Object -Parallel { \u0026#34;Zahl: $_\u0026#34; } Performance-Verbesserungen** Speicherverwaltung wurde weiter optimiert. Schnellere Verarbeitung von groÃŸen Dateien. Verbesserte UnterstÃ¼tzung fÃ¼r Linux/macOS. Bekannte Probleme Kein LTS-Support â†’ Nicht fÃ¼r produktive Umgebungen geeignet. Out-GridView fehlt weiterhin auf macOS/Linux. KompatibilitÃ¤tsprobleme mit Ã¤lteren Modulen, die auf .NET 9 basieren. Fazit: Solltest du auf PowerShell 7.6 upgraden? Nutzungstyp Empfehlung Produktive Umgebungen Nein, bleibe bei PowerShell 7.4 (LTS) Entwicklung \u0026amp; Tests Ja, aber nur fÃ¼r nicht-kritische Workloads Power-User \u0026amp; Neugierige Ja, um die neuen Features zu testen Falls du ein stabiles System benÃ¶tigst, warte auf PowerShell 8.0 (LTS).\nRelease-Daten PowerShell 7.5 (Stable): VerÃ¶ffentlicht im Dezember 2024. PowerShell 7.6 (Preview): Erste Vorschauversion im MÃ¤rz 2025. Dieser Artikel wird aktualisiert, sobald neue Informationen zu PowerShell 7.6 verfÃ¼gbar sind.\n","permalink":"https://attilakrick.com/posts/powershell/neuerungen_powershell_75_76/","summary":"\u003ch2 id=\"powershell-76-und-powershell-75-was-ist-neu\"\u003ePowerShell 7.6 und PowerShell 7.5: Was ist neu?\u003c/h2\u003e\n\u003cp\u003ePowerShell 7.5 und 7.6 bringen viele neue Funktionen mit sich. Es basiert auch auf \u003cstrong\u003e.NET 9\u003c/strong\u003e, was bedeutet, dass es \u003cstrong\u003ekeinen Long-Term Support (LTS)\u003c/strong\u003e hat.\u003c/p\u003e\n\u003cp\u003eIn diesem Artikel werfen wir einen Blick auf die wichtigsten Neuerungen in \u003cstrong\u003ePowerShell 7.5 und 7.6\u003c/strong\u003e, erklÃ¤ren die Unterschiede und geben eine Empfehlung, ob sich ein Upgrade lohnt.\u003c/p\u003e\n\u003ch2 id=\"empfehlung-lohnt-sich-der-umstieg-auf-powershell-75-bzw-76-\"\u003eEmpfehlung: Lohnt sich der Umstieg auf PowerShell 7.5 bzw. 7.6 ?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eFÃ¼r produktive Umgebungen:\u003c/strong\u003e\u003c/p\u003e","title":"Neuerungen PowerShell 7.5 und 7.6"},{"content":"Unterschiede zwischen PowerShell und anderen Shells wie der Eingabeaufforderung oder Bash PowerShell, die Windows-Eingabeaufforderung (CMD) und Bash sind drei verschiedene Shell-Umgebungen, die jeweils unterschiedliche Einsatzbereiche und Funktionen haben. In diesem Artikel vergleichen wir diese Shells und beleuchten die wichtigsten Unterschiede.\n1. Grundlegendes Konzept Shell Basis-Technologie Hauptplattform PowerShell Objektbasiert (OOP) Windows, Linux, macOS CMD (Eingabeaufforderung) Textbasiert Windows Bash Textbasiert Linux, macOS 2. Unterschiede in der Syntax PowerShell: Objektbasiert PowerShell arbeitet mit Objekten, nicht nur mit Text. Das bedeutet, dass Befehle strukturierte Daten ausgeben, die einfach weiterverarbeitet werden kÃ¶nnen.\n1# Listet alle laufenden Prozesse mit detaillierten Informationen 2Get-Process | Select-Object Name, Id, CPU CMD: Textbasiert Die Windows-Eingabeaufforderung gibt reinen Text aus. Es gibt keine native MÃ¶glichkeit, komplexe Datenstrukturen zu Ã¼bergeben.\n1REM Listet laufende Prozesse als reinen Text 2TASKLIST | findstr \u0026#34;notepad\u0026#34; Bash: Textbasiert mit Pipes Bash kann ebenfalls nur mit Text umgehen, ermÃ¶glicht aber leistungsstarke Pipelines mit grep, awk und sed.\n1# Listet laufende Prozesse und filtert nach \u0026#34;firefox\u0026#34; 2ps aux | grep firefox 3. Pipeline-Verarbeitung PowerShell unterscheidet sich von CMD und Bash dadurch, dass es mit Objekten arbeitet, anstatt nur mit Text-Streams.\nShell Pipeline verarbeitet PowerShell Objekte CMD Reiner Text Bash Reiner Text Beispiel in PowerShell:\n1# Sortiert Prozesse nach CPU-Auslastung 2Get-Process | Sort-Object CPU -Descending Das wÃ¤re in Bash oder CMD schwieriger, da man hier mit regulÃ¤ren AusdrÃ¼cken arbeiten mÃ¼sste.\n4. PlattformÃ¼bergreifende Nutzung WÃ¤hrend CMD nur unter Windows lÃ¤uft, sind sowohl PowerShell als auch Bash plattformÃ¼bergreifend verfÃ¼gbar.\nShell Plattformen PowerShell Windows, Linux, macOS CMD Windows Bash Linux, macOS PowerShell Core (pwsh) ermÃ¶glicht es, PowerShell auf Linux und macOS zu nutzen.\n5. Skripting-FÃ¤higkeiten PowerShell ist eine vollstÃ¤ndige Skriptsprache mit UnterstÃ¼tzung fÃ¼r Funktionen, Variablen und Module.\n1# Funktion zur ProzessÃ¼berwachung 2function Check-Process { 3 param([string]$ProcessName) 4 Get-Process -Name $ProcessName -ErrorAction SilentlyContinue 5} Bash hingegen nutzt Shell-Skripte mit einer einfacheren Syntax:\n1# Funktion zur ProzessÃ¼berwachung 2check_process() { 3 ps aux | grep \u0026#34;$1\u0026#34; 4} CMD hat nur begrenzte Skript-Funktionen und kann mit Batch-Dateien (.bat) genutzt werden.\nFazit PowerShell bietet moderne, objektorientierte Automatisierung, wÃ¤hrend CMD und Bash eher fÃ¼r einfache Textverarbeitung und klassische Systemadministration gedacht sind. PowerShell ist besonders fÃ¼r Windows-Administratoren die beste Wahl, wÃ¤hrend Bash unter Linux und macOS bevorzugt wird.\n","permalink":"https://attilakrick.com/posts/powershell/unterschied_ps_vs_bash/","summary":"\u003ch2 id=\"unterschiede-zwischen-powershell-und-anderen-shells-wie-der-eingabeaufforderung-oder-bash\"\u003eUnterschiede zwischen PowerShell und anderen Shells wie der Eingabeaufforderung oder Bash\u003c/h2\u003e\n\u003cp\u003ePowerShell, die Windows-Eingabeaufforderung (CMD) und Bash sind drei verschiedene Shell-Umgebungen, die jeweils unterschiedliche Einsatzbereiche und Funktionen haben. In diesem Artikel vergleichen wir diese Shells und beleuchten die wichtigsten Unterschiede.\u003c/p\u003e\n\u003ch3 id=\"1-grundlegendes-konzept\"\u003e1. Grundlegendes Konzept\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eShell\u003c/th\u003e\n          \u003cth\u003eBasis-Technologie\u003c/th\u003e\n          \u003cth\u003eHauptplattform\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003ePowerShell\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eObjektbasiert (OOP)\u003c/td\u003e\n          \u003ctd\u003eWindows, Linux, macOS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eCMD (Eingabeaufforderung)\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eTextbasiert\u003c/td\u003e\n          \u003ctd\u003eWindows\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eBash\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eTextbasiert\u003c/td\u003e\n          \u003ctd\u003eLinux, macOS\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"2-unterschiede-in-der-syntax\"\u003e2. Unterschiede in der Syntax\u003c/h3\u003e\n\u003ch4 id=\"powershell-objektbasiert\"\u003ePowerShell: Objektbasiert\u003c/h4\u003e\n\u003cp\u003ePowerShell arbeitet mit \u003cstrong\u003eObjekten\u003c/strong\u003e, nicht nur mit Text. Das bedeutet, dass Befehle strukturierte Daten ausgeben, die einfach weiterverarbeitet werden kÃ¶nnen.\u003c/p\u003e","title":"Unterschiede zwischen PowerShell und anderen Shells"},{"content":"Warum Entity Framework Core nutzen? Entity Framework Core (EF Core) ist das bevorzugte Object-Relational Mapping (ORM)-Framework fÃ¼r .NET-Entwickler. Es ermÃ¶glicht eine einfache und effiziente Interaktion mit relationalen Datenbanken, ohne direkt SQL schreiben zu mÃ¼ssen.\nVorteile von EF Core:\nPlattformÃ¼bergreifend - UnterstÃ¼tzt Windows, Linux und macOS. Leistungsstark \u0026amp; flexibel - UnterstÃ¼tzt verschiedene Datenbankanbieter (SQL Server, PostgreSQL, SQLite etc.). Code First \u0026amp; Database First - ErmÃ¶glicht flexible Entwicklungsmethoden. Integriertes Change Tracking - Automatische Verwaltung von Ã„nderungen an DatenbankeintrÃ¤gen. Migrationen \u0026amp; Modellvalidierung - Versionierung der Datenbankstruktur direkt im Code. Installation von Entity Framework Core EF Core wird als NuGet-Paket installiert. Um EF Core zu nutzen, fÃ¼ge die Pakete zu deinem .NET-Projekt hinzu:\nInstallation mit .NET CLI 1# Basis-Paket fÃ¼r EF Core 2dotnet add package Microsoft.EntityFrameworkCore 3 4# Paket fÃ¼r die SQL Server-UnterstÃ¼tzung 5dotnet add package Microsoft.EntityFrameworkCore.SqlServer 6 7# Paket fÃ¼r Migrationen 8dotnet add package Microsoft.EntityFrameworkCore.Tools Installation mit Package Manager Falls du Visual Studio verwendest, kannst du die Pakete auch Ã¼ber die NuGet-Paketverwaltung hinzufÃ¼gen:\nVisual Studio Ã¶ffnen Projekt laden Tools -\u0026gt; NuGet-Paket-Manager -\u0026gt; Paketverwaltung fÃ¼r LÃ¶sung Microsoft.EntityFrameworkCore suchen und installieren Erste Schritte mit EF Core Um EF Core in einem Projekt zu nutzen, erstelle eine DbContext-Klasse und definiere deine Modelle.\nBeispiel: Eine einfache Product-EntitÃ¤t 1public class Product 2{ 3 public int Id { get; set; } 4 public string Name { get; set; } 5 public decimal Price { get; set; } 6} DbContext erstellen Die DbContext-Klasse verwaltet die Verbindung zur Datenbank:\n1public class AppDbContext : DbContext 2{ 3 public DbSet\u0026lt;Product\u0026gt; Products { get; set; } 4 5 protected override void OnConfiguring(DbContextOptionsBuilder options) 6 { 7 options.UseSqlServer(\u0026#34;Server=.;Database=MyAppDB;Trusted_Connection=True;\u0026#34;); 8 } 9} Migrationen und Datenbankverwaltung EF Core ermÃ¶glicht eine einfache Verwaltung der Datenbankstruktur mit Migrationen.\nMigration erstellen 1dotnet ef migrations add InitialCreate Migration anwenden 1dotnet ef database update Abfragen mit LINQ EF Core nutzt LINQ (Language Integrated Query), um Datenbankabfragen direkt in C# zu formulieren.\nBeispiel: Daten abrufen 1using (var context = new AppDbContext()) 2{ 3 var products = context.Products.Where(p =\u0026gt; p.Price \u0026gt; 50).ToList(); 4 foreach (var product in products) 5 { 6 Console.WriteLine($\u0026#34;{product.Name}: {product.Price} EUR\u0026#34;); 7 } 8} Beispiel: EinfÃ¼gen eines neuen Produkts 1using (var context = new AppDbContext()) 2{ 3 var newProduct = new Product { Name = \u0026#34;Laptop\u0026#34;, Price = 999.99M }; 4 context.Products.Add(newProduct); 5 context.SaveChanges(); 6} Tipps fÃ¼r den produktiven Einsatz von EF Core Verwende AsNoTracking(), wenn Daten nur gelesen werden, um Performance zu verbessern. Nutze Lazy Loading sparsam, um unerwartete Datenbankaufrufe zu vermeiden. Verwalte Verbindungen richtig, um Speicherlecks zu vermeiden. Nutze Migrations sauber, um Probleme bei der Datenbankversionierung zu verhindern. Fazit Entity Framework Core erleichtert die Arbeit mit Datenbanken erheblich und bietet viele nÃ¼tzliche Funktionen fÃ¼r .NET-Entwickler. Mit der richtigen Konfiguration und Best Practices kannst du das volle Potenzial von EF Core ausschÃ¶pfen und performante Anwendungen entwickeln.\n","permalink":"https://attilakrick.com/posts/dotnet/efcore/","summary":"\u003ch2 id=\"warum-entity-framework-core-nutzen\"\u003eWarum Entity Framework Core nutzen?\u003c/h2\u003e\n\u003cp\u003eEntity Framework Core (EF Core) ist das bevorzugte \u003cstrong\u003eObject-Relational Mapping (ORM)-Framework\u003c/strong\u003e fÃ¼r .NET-Entwickler. Es ermÃ¶glicht eine einfache und effiziente Interaktion mit relationalen Datenbanken, ohne direkt SQL schreiben zu mÃ¼ssen.\u003c/p\u003e\n\u003cp\u003eVorteile von EF Core:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePlattformÃ¼bergreifend\u003c/strong\u003e - UnterstÃ¼tzt Windows, Linux und macOS.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLeistungsstark \u0026amp; flexibel\u003c/strong\u003e - UnterstÃ¼tzt verschiedene Datenbankanbieter (SQL Server, PostgreSQL, SQLite etc.).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCode First \u0026amp; Database First\u003c/strong\u003e - ErmÃ¶glicht flexible Entwicklungsmethoden.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIntegriertes Change Tracking\u003c/strong\u003e - Automatische Verwaltung von Ã„nderungen an DatenbankeintrÃ¤gen.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMigrationen \u0026amp; Modellvalidierung\u003c/strong\u003e - Versionierung der Datenbankstruktur direkt im Code.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"installation-von-entity-framework-core\"\u003eInstallation von Entity Framework Core\u003c/h2\u003e\n\u003cp\u003eEF Core wird als NuGet-Paket installiert. Um EF Core zu nutzen, fÃ¼ge die Pakete zu deinem .NET-Projekt hinzu:\u003c/p\u003e","title":"Entity Framework Core - Was du als .NET-Entwickler wissen musst"}]